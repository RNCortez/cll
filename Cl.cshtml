

@*filter /Filters/ValidarUsuario------------------------------------------------------------------------------------------------------*@

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Avaliacao1BWeb.Filters
{
    public class ValidarUsuario : Attribute, IActionFilter, IOrderedFilter
    {
        public int Order { get; set; }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            //throw new NotImplementedException();
        }

        public void OnActionExecuting(ActionExecutingContext context)
        {
            if (context.HttpContext.Request.Cookies["idUsuario"] == null ||
                context.HttpContext.Request.Cookies["idUsuario"] == "")
            {
                context.Result = new RedirectResult("/Home/Logout");
            }
        }
    }
}


@*View Interface------------------------------------------------------------------------------------------*@

@{
    ViewData["Title"] = "Home Page";
}

<div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
    <ol class="carousel-indicators">
        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
        <li data-target="#myCarousel" data-slide-to="1"></li>
        <li data-target="#myCarousel" data-slide-to="2"></li>
        <li data-target="#myCarousel" data-slide-to="3"></li>
    </ol>
    <div class="carousel-inner" role="listbox">
        <div class="item active">
            <img src="~/images/banner1.svg" alt="ASP.NET" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Learn how to build ASP.NET apps that can run anywhere.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525028&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner2.svg" alt="Visual Studio" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    There are powerful new features in Visual Studio for building modern web apps.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525030&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner3.svg" alt="Package Management" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Bring in libraries from NuGet and npm, and automate tasks using Grunt or Gulp.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525029&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
        <div class="item">
            <img src="~/images/banner4.svg" alt="Microsoft Azure" class="img-responsive" />
            <div class="carousel-caption" role="option">
                <p>
                    Learn how Microsoft's Azure cloud platform allows you to build, deploy, and scale web apps.
                    <a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkID=525027&clcid=0x409">
                        Learn More
                    </a>
                </p>
            </div>
        </div>
    </div>
    <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
</div>

<div class="row">
    <div class="col-md-3">
        <h2>Application uses</h2>
        <ul>
            <li>Sample pages using ASP.NET Core MVC</li>
            <li>Theming using <a href="https://go.microsoft.com/fwlink/?LinkID=398939">Bootstrap</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>How to</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398600">Add a Controller and View</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699315">Manage User Secrets using Secret Manager.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699316">Use logging to log a message.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699317">Add packages using NuGet.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699319">Target development, staging or production environment.</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Overview</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=518008">Conceptual overview of what is ASP.NET Core</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=699320">Fundamentals of ASP.NET Core such as Startup and middleware.</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398602">Working with Data</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkId=398603">Security</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699321">Client side development</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699322">Develop on different platforms</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=699323">Read more on the documentation site</a></li>
        </ul>
    </div>
    <div class="col-md-3">
        <h2>Run &amp; Deploy</h2>
        <ul>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517851">Run your app</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=517853">Run tools such as EF migrations and more</a></li>
            <li><a href="https://go.microsoft.com/fwlink/?LinkID=398609">Publish to Microsoft Azure Web Apps</a></li>
        </ul>
    </div>
</div>

@*Javascript   wwwroot/js/views--------------------------------------------------------------------------------------------------------------- *@

function PreencherTabela(dados) {
    var txt = '<thead>
    \
    <tr>
        \
        <th>CPF</th>\
        <th>Nome</th>\
        <th>Cidade</th>\
        <th>Data Cadastro</th>\
        <th>...</th>\
    </tr>\
</thead>\
<tbody>
    ';
    $.each(dados, function () {
    txt += '
    <tr>
        <td>' + this.cpf + '</td>
        <td>' + this.nome + '</td>
        <td>
            ' + this.cidade +
            '
        </td>
        <td>' + FormatarData(this.dataCadastro) + '</td>
        <td>
            \
            <a role="button" class="btn btn-warning" href="javascript:Alterar(\'' + this.cpf + '\')">Alterar</a>\
            <a role="button" class="btn btn-danger" href="javascript:Excluir(\'' + this.cpf + '\')">Excluir</a>\
        </td>
    </tr>';
    });
    txt += '
</tbody>';
    $("#tblClientes").html(txt);
};

function ObterClientes() {
    $("#divLoading").show(300);
    $.getJSON("/Cliente/Obter/", function (data) {
        PreencherTabela(data);
    });
    $("#divLoading").hide(300);
};

$(document).ready(function () {
    ObterClientes();
});

$("#btnPesquisar").click(function () {
    if ($("#txtPalavraChave").val() == "") {
        ObterClientes();
    }
    else {
        $("#divLoading").show(300);
        $.ajax({
            type: 'POST',
            url: '/Cliente/ObterPorNome',
            data: { Palavra: $("#txtPalavraChave").val() },
            success: function (result) {
                if (result != null && result.length > 0) {
                    PreencherTabela(result);
                }
                else {
                    bootbox.alert("Nenhum cliente encontrado.");
                }
                $("#divLoading").hide(300);
            },
            error: function (XMLHttpRequest, txtStatus, errorThrown) {
                alert("Status: " + txtStatus); alert("Error: " + errorThrown);
                $("#divLoading").hide(300);
            }
        });
    }
});

$("#btnGravar").click(function () {
    var msg = "";
    var cpf = $("#txtCPF").val();
    var nome = $("#txtNome").val();
    var logradouro = $("#txtLogradouro").val();
    var bairro = $("#txtBairro").val();
    var cidade = $("#txtCidade").val();
    var estado = $("#txtEstado").val();
    var cep = $("#txtCEP").val();

    if (cpf == "") {
        msg += "Por favor, informe o CPF do cliente.<br />";
    }
    if (nome == "") {
        msg += "Por favor, informe o NOME do cliente.<br />";
    }
    if (logradouro == "") {
        msg += "Por favor, informe o LOGRADOURO do cliente.<br />";
    }
    if (bairro == "") {
        msg += "Por favor, informe o BAIRRO do cliente.<br />";
    }
    if (cidade == "") {
        msg += "Por favor, informe a CIDADE do cliente.<br />";
    }
    if (estado == "") {
        msg += "Por favor, informe o ESTADO do cliente.<br />";
    }
    if (cep == "") {
        msg += "Por favor, informe o CEP do cliente.<br />";
    }
    if (msg.length > 0) {
        Mensagem("msgFormCliente", msg);
    }
    else {
        $("#divLoading").show(300);
        var urlAcao = "/Cliente/Inserir";
        if ($("#hiddenControleAlterar").val() == "1") {
            urlAcao = "/Cliente/Alterar";
        }
        $.ajax({
            type: 'POST',
            url: urlAcao,
            data: { Cpf: cpf, Nome: nome, Logradouro: logradouro, Bairro: bairro, Cidade: cidade, Estado: estado, Cep: cep },
            success: function (result) {
                $("#divLoading").hide(300);
                if (result.length > 0) {
                    Mensagem("msgFormCliente", result);
                }
                else {
                    LimparFormulario();
                    $.fancybox.close();
                    ObterClientes();
                }
            },
            error: function (XMLHttpRequest, txtStatus, errorThrown) {
                alert("Status: " + txtStatus); alert("Error: " + errorThrown);
                $("#divLoading").hide(300);
            }
        });
    }
});

function Alterar(cpf) {
    $("#divLoading").show(300);
    $.ajax({
        type: 'POST',
        url: '/Cliente/Obter',
        data: { cpf: cpf },
        success: function (result) {
            if (Object.keys(result).length > 0) {
                $("#divLoading").hide(300);
                $.fancybox.open({
                    src: '#formCliente',
                    type: 'inline'
                });
                $("#txtCPF").val(result.cpf);
                $("#txtNome").val(result.nome);
                $("#txtLogradouro").val(result.logradouro);
                $("#txtBairro").val(result.bairro);
                $("#txtCidade").val(result.cidade);
                $("#txtEstado").val(result.estado);
                $("#txtCEP").val(result.cep);
                $("#hiddenControleAlterar").val("1");
            }
            else {
                $("#divLoading").hide(300);
            }
        },
        error: function (XMLHttpRequest, txtStatus, errorThrown) {
            alert("Status: " + txtStatus); alert("Error: " + errorThrown);
            $("#divLoading").hide(300);
        }
    });
};

function Excluir(cpf) {
    bootbox.confirm({
        message: "Confirma a exclusão deste registro?",
        buttons: {
            confirm: {
                label: 'Sim',
                className: 'btn-success'
            },
            cancel: {
                label: 'Não',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {
                $.ajax({
                    type: 'POST',
                    url: '/Cliente/Excluir',
                    data: { cpf: cpf },
                    success: function (result) {
                        if (result == "") {
                            ObterClientes();
                        }
                        else {
                            Mensagem("divAlerta", result);
                        }
                    },
                    error: function (XMLHttpRequest, txtStatus, errorThrown) {
                        alert("Status: " + txtStatus); alert("Error: " + errorThrown);
                        $("#divLoading").hide(300);
                    }
                });
            }
        }
    });
};


function LimparFormulario() {
    $("#hiddenControleAlterar").val("0");
    $("input[type='text']").val("");
    $("input[type='date']").val("0000-00-00");
    $("textarea").val("");
}

function ConsultaCepWS(cep) {
    $.ajax({
        type: 'POST',
        url: '/Cliente/ConsultaCep',
        data: { cep: cep },
        success: function (result) {
            if (result != "") {
                $("#txtLogradouro").val(result.logradouro);
                $("#txtBairro").val(result.bairro);
                $("#txtCidade").val(result.cidade);
                $("#txtEstado").val(result.estado);
            }
        },
        error: function (XMLHttpRequest, textStatus, errorThrow) {
            alert(textStatus);
        }
    });
}

$("#txtCEP").change(function () {
    var nroCEP = $("#txtCEP").val();
    ConsultaCepWS(nroCEP);
});

@*Controller-------------------------------------------------------------------------------------------*@
public JsonResult Obter()
        {
            var dados = new cl.ClienteController().Obter();
            if (dados != null && dados.Count > 0)
                return Json(dados);
            else
                return Json("");
        }

        [HttpPost]
        public JsonResult ObterPorNome(string palavra)
        {
            var dados = new cl.ClienteController().ObterPorNome(palavra);
            if (dados != null && dados.Count > 0)
                return Json(dados);
            else
                return Json("");
        }

        [HttpPost]
        public JsonResult Obter(string cpf)
        {
            var dados = new cl.ClienteController().Obter(cpf);
            if (dados != null)
                return Json(dados);
            else
                return Json("");
        }

        [HttpPost]
        public JsonResult Inserir(IFormCollection form)
        {
            ClienteViewModel c = new ClienteViewModel()
            {
                Cpf = form["Cpf"].ToString(),
                Nome = form["Nome"].ToString(),
                Logradouro = form["Logradouro"].ToString(),
                Bairro = form["Bairro"].ToString(),
                Cidade = form["Cidade"].ToString(),
                Estado = form["Estado"].ToString(),
                Cep = form["Cep"].ToString(),
                DataCadastro = DateTime.Now
            };
            if (new cl.ClienteController().Inserir(c) > 0)
                return Json("");
            else
                return Json("Não foi possível inserir o cliente.");
        }

        [HttpPost]
        public JsonResult Alterar(IFormCollection form)
        {
            ClienteViewModel c = new ClienteViewModel()
            {
                Cpf = form["Cpf"].ToString(),
                Nome = form["Nome"].ToString(),
                Logradouro = form["Logradouro"].ToString(),
                Bairro = form["Bairro"].ToString(),
                Cidade = form["Cidade"].ToString(),
                Estado = form["Estado"].ToString(),
                Cep = form["Cep"].ToString(),
                DataCadastro = DateTime.Now
            };
            if (new cl.ClienteController().Alterar(c) > 0)
                return Json("");
            else
                return Json("Não foi possível alterar o cliente.");
        }

        [HttpPost]
        public JsonResult Excluir(string cpf)
        {
            cl.ClienteController ctlCliente = new cl.ClienteController();
            if (ctlCliente.Excluir(cpf) > 0)
                return Json("");
            else
                return Json("Não foi possível excluir o registro selecionado.");
        }

        [HttpPost]
        public async Task<IActionResult>
    ConsultaCep(string cep)
    {
    try
    {
    wsCorreio.AtendeClienteClient correio =
    new wsCorreio.AtendeClienteClient();
    wsCorreio.consultaCEPResponse dados =
    await correio.consultaCEPAsync(cep);

    Endereco endereco = new Endereco()
    {
    Logradouro = dados.@return.end,
    Bairro = dados.@return.bairro,
    Cep = dados.@return.cep,
    Cidade = dados.@return.cidade,
    Estado = dados.@return.uf
    };

    return Json(endereco);
    }
    catch
    {
    return Json("");
    }
    }

    public IActionResult ExportarPDF()
    {
    Document doc = new Document(PageSize.A4, 100, 50, 100, 50);
    MemoryStream stream = new MemoryStream();
    PdfWriter pdf = PdfWriter.GetInstance(doc, stream);
    pdf.CloseStream = false;

    doc.Open();

    Paragraph p1 = new Paragraph("UNOESTE - Universidade do Oeste Paulista");
    doc.Add(p1);
    Paragraph p2 = new Paragraph("FIPP - Faculdade de Informática de Presidente Prudente");
    doc.Add(p2);
    Paragraph branco = new Paragraph(" ");
    doc.Add(branco);

    PdfPTable tabela = new PdfPTable(4);
    tabela.WidthPercentage = 100;

    PdfPCell cel = new PdfPCell(new Phrase("Relatório de Clientes"));
    cel.Colspan = 4;
    cel.BackgroundColor = new BaseColor(System.Drawing.Color.Cornsilk);
    cel.MinimumHeight = 30;
    cel.HorizontalAlignment = 1; //0->Esquerda, 1->Centro, 2->Direita

    tabela.AddCell(cel);

    cl.ClienteController ctlCliente = new cl.ClienteController();
    var dados = ctlCliente.Obter();

    foreach(ClienteViewModel c in dados)
    {
    tabela.AddCell(c.Cpf);
    tabela.AddCell(c.Nome);
    tabela.AddCell(c.Cidade);
    tabela.AddCell(c.DataCadastro.ToShortDateString());
    }
    doc.Add(tabela);

    doc.Close();
    stream.Flush();
    stream.Position = 0;

    return File(stream, "application/pdf", "Relatorio.pdf");
    }

    @*Class Library------------------------------------------------------------------------*@
    @*View Model----------------------------------------------------------------*@


    public class ClienteViewModel
    {
    public string Cpf { get; set; }
    public string Nome { get; set; }
    public string Logradouro { get; set; }
    public string Bairro { get; set; }
    public string Cidade { get; set; }
    public string Estado { get; set; }
    public string Cep { get; set; }
    public DateTime DataCadastro { get; set; }
    }


    @*MODEL*@

    internal class Cliente
    {
    private string _cpf;
    private string _nome;
    private string _logradouro;
    private string _bairro;
    private string _cidade;
    private string _estado;
    private string _cep;
    private DateTime _dataCadastro;

    internal string Cpf { get => _cpf; set => _cpf = value; }
    internal string Nome { get => _nome; set => _nome = value; }
    internal string Logradouro { get => _logradouro; set => _logradouro = value; }
    internal string Bairro { get => _bairro; set => _bairro = value; }
    internal string Cidade { get => _cidade; set => _cidade = value; }
    internal string Estado { get => _estado; set => _estado = value; }
    internal string Cep { get => _cep; set => _cep = value; }
    internal DateTime DataCadastro { get => _dataCadastro; set => _dataCadastro = value; }

    internal Cliente Obter(string cpf)
    {
    return cpf.Length > 0 ? new ClienteDAO().Obter(cpf) : null;
    }

    internal List<Cliente>
        Obter()
        {
        return new ClienteDAO().Obter();
        }

        internal List<Cliente>
            ObterPorNome(string palavraChave)
            {
            return palavraChave.Length > 0 ? new ClienteDAO().ObterPorNome(palavraChave) : null;
            }

            internal int Inserir()
            {
            if (_cpf.Length > 0 && _nome.Length >= 2 && _logradouro.Length > 0 && _bairro.Length > 0 &&
            _cidade.Length > 0 && _estado.Length == 2 && _cep.Length > 0 && _dataCadastro > DateTime.MinValue)
            return new ClienteDAO().Inserir(this);
            else
            return -10;
            }

            internal int Alterar()
            {
            if (_cpf.Length > 0 && _nome.Length >= 2 && _logradouro.Length > 0 && _bairro.Length > 0 &&
            _cidade.Length > 0 && _estado.Length == 2 && _cep.Length > 0 && _dataCadastro > DateTime.MinValue)
            return new ClienteDAO().Alterar(this);
            else
            return -10;
            }

            internal int Excluir(string cpf)
            {
            return cpf.Length > 0 ? new ClienteDAO().Excluir(cpf) : -10;
            }

            @*DAO------------------------------------------------------------------------------------*@

            private List<Cliente>
                TableToList(DataTable dt)
                {
                List<Cliente>
                    dados = null;
                    if (dt != null && dt.Rows.Count > 0)
                    dados = (from DataRow row in dt.Rows
                    select new Cliente()
                    {
                    Cpf = row["cli_cpf"].ToString(),
                    Nome = row["cli_nome"].ToString(),
                    Logradouro = row["cli_logradouro"].ToString(),
                    Bairro = row["cli_bairro"].ToString(),
                    Cidade = row["cli_cidade"].ToString(),
                    Estado = row["cli_estado"].ToString(),
                    Cep = row["cli_cep"].ToString(),
                    DataCadastro = Convert.ToDateTime(row["cli_datacadastro"])
                    }).ToList();
                    return dados;
                    }

                    internal List<Cliente>
                        Obter()
                        {
                        ComandoSQL.Parameters.Clear();
                        ComandoSQL.CommandText = @"select cli_cpf, cli_nome, cli_logradouro, cli_bairro, cli_cidade,
                        cli_estado, cli_cep, cli_datacadastro
                        from Cliente
                        order by cli_nome";
                        DataTable dt = ExecutaSelect();

                        return TableToList(dt);
                        }

                        internal List<Cliente>
                            ObterPorNome(string nome)
                            {
                            ComandoSQL.Parameters.Clear();
                            ComandoSQL.CommandText = @"select cli_cpf, cli_nome, cli_logradouro, cli_bairro, cli_cidade,
                            cli_estado, cli_cep, cli_datacadastro
                            from Cliente
                            where cli_nome like @nome
                            order by cli_nome";
                            ComandoSQL.Parameters.AddWithValue("@nome", string.Format("%{0}%", nome));
                            DataTable dt = ExecutaSelect();

                            return TableToList(dt);
                            }

                            internal Cliente Obter(string cpf)
                            {
                            ComandoSQL.Parameters.Clear();
                            ComandoSQL.CommandText = @"select cli_cpf, cli_nome, cli_logradouro, cli_bairro, cli_cidade,
                            cli_estado, cli_cep, cli_datacadastro
                            from Cliente
                            where cli_cpf = @cpf
                            order by cli_nome";
                            ComandoSQL.Parameters.AddWithValue("@cpf", cpf);
                            DataTable dt = ExecutaSelect();
                            var dados = TableToList(dt);

                            return dados == null ? null : dados.FirstOrDefault();
                            }

                            internal int Inserir(Cliente c)
                            {
                            ComandoSQL.Parameters.Clear();
                            ComandoSQL.CommandText = @"insert into Cliente (cli_cpf, cli_nome, cli_logradouro, cli_bairro, cli_cidade,
                            cli_estado, cli_cep, cli_datacadastro) values
                            (@cpf, @nome, @logradouro, @bairro, @cidade, @estado, @cep, @dataCadastro)";
                            ComandoSQL.Parameters.AddWithValue("@cpf", c.Cpf);
                            ComandoSQL.Parameters.AddWithValue("@nome", c.Nome);
                            ComandoSQL.Parameters.AddWithValue("@logradouro", c.Logradouro);
                            ComandoSQL.Parameters.AddWithValue("@bairro", c.Bairro);
                            ComandoSQL.Parameters.AddWithValue("@cidade", c.Cidade);
                            ComandoSQL.Parameters.AddWithValue("@estado", c.Estado);
                            ComandoSQL.Parameters.AddWithValue("@cep", c.Cep);
                            ComandoSQL.Parameters.AddWithValue("@dataCadastro", c.DataCadastro);

                            return ExecutaComando();
                            }

                            internal int Alterar(Cliente c)
                            {
                            ComandoSQL.Parameters.Clear();
                            ComandoSQL.CommandText = @"update Cliente set cli_nome = @nome,
                            cli_logradouro = @logradouro, cli_bairro = @bairro, cli_cidade = @cidade,
                            cli_estado = @estado, cli_cep = @cep, cli_datacadastro = @dataCadastro
                            where cli_cpf = @cpf";
                            ComandoSQL.Parameters.AddWithValue("@cpf", c.Cpf);
                            ComandoSQL.Parameters.AddWithValue("@nome", c.Nome);
                            ComandoSQL.Parameters.AddWithValue("@logradouro", c.Logradouro);
                            ComandoSQL.Parameters.AddWithValue("@bairro", c.Bairro);
                            ComandoSQL.Parameters.AddWithValue("@cidade", c.Cidade);
                            ComandoSQL.Parameters.AddWithValue("@estado", c.Estado);
                            ComandoSQL.Parameters.AddWithValue("@cep", c.Cep);
                            ComandoSQL.Parameters.AddWithValue("@dataCadastro", c.DataCadastro);

                            return ExecutaComando();
                            }


                            internal int Excluir(string cpf)
                            {
                            ComandoSQL.Parameters.Clear();
                            ComandoSQL.CommandText = @"delete from Cliente where cli_cpf = @cpf";
                            ComandoSQL.Parameters.AddWithValue("@cpf", cpf);
                            return ExecutaComando();
                            }

                            @*Controller--------------------------------------------------------------------*@

                            public List<ClienteViewModel>
                                Obter()
                                {
                                var dados = new Cliente().Obter();
                                if (dados != null && dados.Count > 0)
                                return (from d in dados
                                select new ClienteViewModel()
                                {
                                Cpf = d.Cpf,
                                Nome = d.Nome,
                                Logradouro = d.Logradouro,
                                Bairro = d.Bairro,
                                Cidade = d.Cidade,
                                Estado = d.Estado,
                                Cep = d.Cep,
                                DataCadastro = d.DataCadastro
                                }).ToList();
                                else
                                return null;
                                }

                                public List<ClienteViewModel>
    ObterPorNome(string palavraChave)
    {
    var dados = new Cliente().ObterPorNome(palavraChave);
    if (dados != null && dados.Count > 0)
    return (from d in dados
    select new ClienteViewModel()
    {
    Cpf = d.Cpf,
    Nome = d.Nome,
    Logradouro = d.Logradouro,
    Bairro = d.Bairro,
    Cidade = d.Cidade,
    Estado = d.Estado,
    Cep = d.Cep,
    DataCadastro = d.DataCadastro
    }).ToList();
    else
    return null;
    }

    public ClienteViewModel Obter(string cpf)
    {
    var d = new Cliente().Obter(cpf);
    if (d != null)
    return new ClienteViewModel()
    {
    Cpf = d.Cpf,
    Nome = d.Nome,
    Logradouro = d.Logradouro,
    Bairro = d.Bairro,
    Cidade = d.Cidade,
    Estado = d.Estado,
    Cep = d.Cep,
    DataCadastro = d.DataCadastro
    };
    else
    return null;
    }

    public int Inserir(ClienteViewModel c)
    {
    if (c != null)
    {
    Cliente cliente = new Cliente()
    {
    Cpf = c.Cpf,
    Nome = c.Nome,
    Logradouro = c.Logradouro,
    Bairro = c.Bairro,
    Cidade = c.Cidade,
    Estado = c.Estado,
    Cep = c.Cep,
    DataCadastro = c.DataCadastro
    };
    return cliente.Inserir();
    }
    else
    return -10;
    }

    public int Alterar(ClienteViewModel c)
    {
    if (c != null)
    {
    Cliente cliente = new Cliente()
    {
    Cpf = c.Cpf,
    Nome = c.Nome,
    Logradouro = c.Logradouro,
    Bairro = c.Bairro,
    Cidade = c.Cidade,
    Estado = c.Estado,
    Cep = c.Cep,
    DataCadastro = c.DataCadastro
    };
    return cliente.Alterar();
    }
    else
    return -10;
    }


    public int Excluir(string cpf)
    {
    Cliente c = new Cliente();
    return c.Excluir(cpf);
    }

    @*Adicionais Upload , email e pdf-----------------------------------------------------------*@
    @*email------------------------------------------------------------------------------ *@
    private string EnviarEmail(string emailFrom, string nomeFrom, List<string>
    emailPara, string assunto, string texto)
    {
    //Gerando o objeto da mensagem
    MailMessage msg = new MailMessage();
    //Remetente
    msg.From = new MailAddress(emailFrom, nomeFrom);
    //Destinatários
    foreach (string email in emailPara)
    msg.To.Add(email);
    //Assunto
    msg.Subject = assunto;
    //Texto a ser enviado
    msg.Body = texto;
    msg.IsBodyHtml = true;

    //Gerando o objeto para envio da mensagem (Exemplo pelo Gmail)
    SmtpClient client = new SmtpClient();
    client.UseDefaultCredentials = true;
    client.Host = "smtp.gmail.com";
    client.Port = 587;
    client.EnableSsl = true;
    client.DeliveryMethod = SmtpDeliveryMethod.Network;
    client.Credentials = new NetworkCredential(emailFrom, "SuaSenhaAqui");
    try
    {
    client.Send(msg);
    return "OK";
    }
    catch (Exception ex)
    {
    return "Falha: " + ex.Message;
    }
    finally
    {
    msg.Dispose();
    }
    }


    @*PDF na view------------------------------------------------------------------------------------------------------*@
    <div id="divExportarPDF">
        <a role="button" id="linkPDF" class="btn btn-default" href="/Questionario/ExportarPDF">Exportar para PDF</a>
    </div>

    @*PDF NA CONTROLLER---------------------------------------------------------------------------------------------------*@

    public IActionResult ExportarPDF()
    {
    Document doc = new Document(PageSize.A4, 50, 50, 100, 70);
    MemoryStream stream = new MemoryStream();
    PdfWriter pdf = PdfWriter.GetInstance(doc, stream);
    pdf.CloseStream = false;

    TwoColumnHeaderFooter headerFooter = new TwoColumnHeaderFooter();
    pdf.PageEvent = headerFooter;
    headerFooter.Title = "SURVEY.NET";
    headerFooter.HeaderLeft = "Questionários";
    headerFooter.HeaderRight = Request.Cookies["nomeUsuario"].ToString();
    headerFooter.HeaderFont = FontFactory.GetFont(BaseFont.HELVETICA_BOLD, 14, BaseColor.Blue);

    doc.Open();


    var dados = new cl.QuestionarioController().ObterPorUsuario(int.Parse(Request.Cookies["idUsuario"].ToString()));
    if (dados != null && dados.Count > 0)
    {
    PdfPTable tabela = new PdfPTable(5);
    tabela.WidthPercentage = 100;

    PdfPCell cel = new PdfPCell(new Phrase("Questionários Cadastrados"));
    cel.Colspan = 5;
    cel.BackgroundColor = new BaseColor(System.Drawing.Color.Cornsilk);
    cel.MinimumHeight = 30;
    cel.HorizontalAlignment = 1; //0->Esquerda, 1->Centro, 2->Direita

    tabela.AddCell(cel);

    tabela.AddCell("ID");
    tabela.AddCell("TÍTULO");
    tabela.AddCell("INÍCIO");
    tabela.AddCell("FIM");
    tabela.AddCell("GUID");

    foreach (var q in dados)
    {
    tabela.AddCell(q.Id.ToString());
    tabela.AddCell(q.Nome);
    tabela.AddCell(q.Inicio.ToShortDateString());
    tabela.AddCell(q.Fim.ToShortDateString());
    tabela.AddCell(q.Guid);
    }

    doc.Add(tabela);
    }
    else
    {
    Paragraph p = new Paragraph("Não há questionários a serem exportados.");
    doc.Add(p);
    }
    doc.Close();
    stream.Flush();
    stream.Position = 0;

    return File(stream, "application/pdf", "Relatorio.pdf");
    }



    @*rota na controller--------------------------------------------------------*@

    [Route("responder/{GUID}")]

    @*Rota no Startur------------------------------------------------------------*@

    public void Configure(IApplicationBuilder app, IHostingEnvironment env)
    {
    if (env.IsDevelopment())
    {
    app.UseBrowserLink();
    app.UseDeveloperExceptionPage();
    }
    else
    {
    app.UseExceptionHandler("/Home/Error");
    }

    app.UseStaticFiles();

    app.UseMvc(routes =>
    {
    routes.MapRoute(
    name: "default",
    template: "{controller=Home}/{action=Index}/{id?}");
    });
    }

    @*Gravar com arquivo---------------------------------------------------- *@
    [HttpPost]
    public JsonResult Gravar(IFormCollection form)
    {
    if (form.Keys.Count > 0)
    {

    int id = 0;
    int.TryParse(form["Id"], out id);
    string nome = form["Nome"].ToString().Trim();
    DateTime inicio = DateTime.MinValue;
    DateTime.TryParse(form["Inicio"], out inicio);
    DateTime fim = DateTime.MinValue;
    DateTime.TryParse(form["Fim"], out fim);
    string msgFeedback = form["MsgFeedBack"].ToString().Trim();
    string guid = form["Guid"].ToString().Trim();
    int idUsuario = int.Parse(Request.Cookies["idUsuario"].ToString());
    string nomeArquivo = form["Imagem"].ToString().Trim();
    string base64 = form["Imagem64"].ToString().Trim();

    try
    {
    if (Request.Form.Files.Count > 0)
    {
    var extensoesPermitidas = new[] { ".jpg", ".gif", ".png" };
    //Recepcionando cada arquivo
    var arquivo = Request.Form.Files[0];
    if (arquivo != null && arquivo.Length > 0 && arquivo.Length <= 1048576) //Maximo 1MB
    {
    string extensaoArquivo = Path.GetExtension(arquivo.FileName).ToLower();
    if (extensoesPermitidas.Contains(extensaoArquivo))
    {
    if (nomeArquivo == "")
    nomeArquivo = Guid.NewGuid().ToString() + ".jpg";

    var caminho = _env.WebRootPath + "\\images";
    caminho = Path.Combine(caminho, nomeArquivo);


    var img = new MemoryStream();
    arquivo.CopyTo(img);
    Resize(img, 100, caminho, out base64);
    }
    else
    Console.WriteLine("Formato inválido de arquivo");
    }
    else
    Console.WriteLine("Tamanho inválido de arquivo");
    }
    }
    catch (Exception ex)
    {

    }

    QuestionarioViewModel q = new QuestionarioViewModel();
    q.Id = id;
    q.Nome = nome;
    q.Inicio = inicio;
    q.Fim = fim;
    q.MsgFeedback = msgFeedback;
    q.Guid = guid;
    q.Imagem = nomeArquivo;
    q.Imagem64 = base64;
    q.UsuarioId = idUsuario;

    cl.QuestionarioController ctlQuestionario = new cl.QuestionarioController();
    if (ctlQuestionario.Gravar(q) > 0)
    return Json("");
    else
    return Json("Erro ao gravar o questionário: " + q.Nome.ToUpper());
    }
    else
    {
    return Json("O formulário submetido não contem valores válidos.");
    }
    }

    @*JS gravar com arquivo-----------------------------------------------------------*@

    $("#btnConfirmar").click(function () {

    var formData = new FormData();

    formData.append("Id", $("#txtId").val());
    formData.append("Nome", $("#txtTitulo").val());
    formData.append("Inicio", $("#txtDataInicio").val());
    formData.append("Fim", $("#txtDataFim").val());
    formData.append("MsgFeedBack", $("#txtFeedback").val());
    formData.append("Guid", $("#txtGuid").val());
    formData.append("Imagem", $("#txtNomeImg").val());
    formData.append("Imagem64", $("#txtImg64").val());
    var arquivos = document.getElementById("btnImagem");
    formData.append("arquivo", arquivos.files[0]);

    var msg = "";

    if (formData["titulo"] == "") {
    msg += "Por favor, informe um título para o questionário.<br />";
    }
    if (formData["inicio"] == "") {
    msg += "Por favor, informe a data para início do questionário.<br />";
    }
    if (formData["fim"] == "") {
    msg += "Por favor, informe a data para fechamento do questionário.<br />";
    }
    if (formData["guid"] == "") {
    msg += "Por favor, informe a Guid (URL) para o questionário.<br />";
    }
    if (msg.length > 0) {
    Mensagem("divAlertaNovoQuestionario", msg);
    }
    else {
    $("#divLoading").show(300);
    $.ajax({
    type: 'POST',
    url: '/Questionario/Gravar',
    data: formData,
    dataType: 'json',
    contentType: false,
    processData: false,
    success: function (result) {
    $("#divLoading").hide(300);
    if (result.length > 0) {
    Mensagem("divAlertaNovoQuestionario", result);
    }
    else {
    LimparFormulario();
    $.fancybox.close();
    ObterQuestionarios();
    }
    },
    error: function (XMLHttpRequest, txtStatus, errorThrown) {
    alert("Status: " + txtStatus); alert("Error: " + errorThrown);
    $("#divLoading").hide(300);
    }
    });
    }
    });


    @*form com upload de arquivo-----------------------------------*@


    @*Fancybox FORM QUESTIONÁRIO*@
    <div style="display: none; min-width: 300px; width: 800px" id="formQuestionario">
        <h3>Dados do Questionário</h3>
        <form name="formQuestionario" id="formQuestionario" action="/Questionario/Gravar" method="post">
            <input type="hidden" name="txtId" id="txtId" value="0" />
            <input type="hidden" name="txtNomeImg" id="txtNomeImg" value="" />
            <input type="hidden" name="txtImg64" id="txtImg64" value="" />
            <div id="divImagem">

            </div>
            <div class="form-group">
                <label for="txtTitulo">Título:</label>
                <input type="text" required name="txtTitulo" id="txtTitulo" class="form-control" />
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="txtDataInicio">Início:</label>
                        <input type="date" name="txtDataInicio" id="txtDataInicio" class="form-control" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="txtDataFim">Fim:</label>
                        <input type="date" name="txtDataFim" id="txtDataFim" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="txtFeedback">Feedback ao final do questionário:</label>
                <textarea class="form-control" name="txtFeedback" id="txtFeedback" rows="4"></textarea>
            </div>
            <div class="form-group">
                <label for="txtSenha">Guid para acesso ao questionário:</label>
                <div class="row">
                    <div class="col-sm-4">
                        <label>http://www.seudominio.com/survey/</label>
                    </div>
                    <div class="col-sm-8">
                        <input type="text" required name="txtGuid" id="txtGuid" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="form-inline">
                <label>Imagem</label>
                <input type="file" id="btnImagem" name="btnImagem" />
                <br />
            </div>
            <div class="form-inline">
                <button type="button" name="btnConfirmar" id="btnConfirmar" class="btn btn-success">Confirmar</button>
                <button type="button" name="btnCancelar" id="btnCancelar" class="btn btn-danger"
                        onclick="javascript: LimparFormulario(); $.fancybox.close();">
                    Cancelar
                </button>
            </div>
        </form>
        <div id="divAlertaNovoQuestionario" class="alert alert-danger" role="alert" style="display:none"></div>
    </div>
